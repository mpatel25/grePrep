#!/usr/bin/env python3

import sys
from os import system, path
import random
import textwrap
from datetime import datetime

#--------------GETCH-----------------------------------------------------
class _Getch:
    """Gets a single character from standard input.  Does not echo to the
screen."""
    def __init__(self):
        try:
            self.impl = _GetchWindows()
        except ImportError:
            self.impl = _GetchUnix()

    def __call__(self): return self.impl()


class _GetchUnix:
    def __init__(self):
        import tty, sys

    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


class _GetchWindows:
    def __init__(self):
        import msvcrt

    def __call__(self):
        import msvcrt
        return msvcrt.getch()


getch = _Getch()
#------------------------------------------------------------------------

TEXTWRAP_LEN=45

wordDefDict = {}
wordList = []
gameList = []

def createDictFromVocabFile():
    global wordDefDict
    global wordList
    if path.exists("database.txt"):
        with open("database.txt", 'r') as vocabFile:
            vocabRaw = vocabFile.read()[:-1]
    else:
        raise ValueError("Database.txt not found!")
    for chunks in vocabRaw.split("\n\n"):
        info = chunks.split("\n")
        word = info[0].replace("$","")
        defs = list(filter(lambda i: i[0] == ">", info))
        defs = [i[1:] for i in defs]
        wordDefDict[word] = defs
        wordList.append(word)

def randomSeed():
    random.seed(datetime.now())

def setupGame():
    global wordList
    global gameList
    start = 0
    end = len(wordList)
    try:
        start = wordList.index(sys.argv[1])
    except ValueError:
        raise ValueError("Invalid start word.")
    except IndexError:
        pass
    try:
        end = wordList.index(sys.argv[2])
        end += 1
    except ValueError:
        raise ValueError("Invalid end word.")
    except IndexError:
        pass
    gameList = wordList[start:end]
    randomSeed()

def createOptions(key):
    global gameList
    options = [key]
    while len(options) < 5:
        opt = gameList[random.randint(0, len(gameList)-1)]
        if opt not in options:
            options.append(opt)
    random.shuffle(options)
    return options

def wrapString(string):
    return textwrap.fill(string, TEXTWRAP_LEN)

def displayResponse(key, options):
    global wordDefDict
    print(wrapString(str(wordDefDict[key])))
    print('')
    for i in range(0, len(options)):
        print ((i+1), wrapString(options[i]))
    return getch()

def clearScreen():
    system("clear")

def playGame():
    global wordDefDict
    global wordList
    global gameList
    remainingWords = list(gameList)
    random.shuffle(remainingWords)
    clearScreen()
    totalCount = 0
    while remainingWords:
        select = chr(0)
        key = remainingWords.pop()
        options = createOptions(key)
        selectAnswer = chr(49 + options.index(key))
        totalCount += 1
        while select != selectAnswer:
            print(totalCount)
            print()   
            select = displayResponse(key, options)
            clearScreen()
            if select == chr(27):
                exit()

def main():
    createDictFromVocabFile()
    setupGame()
    playGame()

if __name__ == '__main__':
    main()


