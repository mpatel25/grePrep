#!/usr/bin/env python3

import sys
from os import system, path
import random
import textwrap
from datetime import datetime

wordDefSentDict = {}
wordList = []
gameWordSentenceDefList = []

ALT_KEY = 0
SENT_KEY = 1
DEF_KEY = 2

TEXTWRAP_LEN=45

def createDictFromVocabFile():
    global wordDefSentDict
    global wordList
    if path.exists("database.txt"):
        with open("database.txt", 'r') as vocabFile:
            vocabRaw = vocabFile.read()[:-1]
    else:
        raise ValueError("Database.txt not found!")
    for chunks in vocabRaw.split("\n\n"):
        info = chunks.split("\n")
        word = info[0].replace("$","")
        alts = list(filter(lambda i: i[0] == "$", info))
        alts = [i[1:] for i in alts]
        defs = list(filter(lambda i: i[0] == ">", info))
        defs = [i[1:] for i in defs]
        sents = list(filter(lambda i: i[0] == "~", info))
        sents = [i[1:] for i in sents]
        wordDefSentDict[word] = [alts, sents, defs]
        wordList.append(word)

def randomSeed():
    random.seed(datetime.now())

def setupGame():
    global wordList
    global gameWordSentenceDefList
    start = 0
    end = len(wordList)
    try:
        start = wordList.index(sys.argv[1])
    except ValueError:
        raise ValueError("Invalid start word.")
    except IndexError:
        pass
    try:
        end = wordList.index(sys.argv[2])
        end += 1
    except ValueError:
        raise ValueError("Invalid end word.")
    except IndexError:
        pass
    randomSeed()
    for words in wordList[start:end]:
        #sent = random.choice(wordDefSentDict[words][SENT_KEY])
        sent = wordDefSentDict[words][SENT_KEY][random.randint(0, len(wordDefSentDict[words][SENT_KEY])-1)]
        alt = ""
        for alts in wordDefSentDict[words][ALT_KEY]:
            if alts in sent.lower():
                alt = alts
        defs = wordDefSentDict[words][DEF_KEY]
        gameWordSentenceDefList.append((alt,sent,defs))

def wrapPrint(string):
    print(textwrap.fill(string, TEXTWRAP_LEN))
        
def displayResponse(key):
    wrapPrint (key[SENT_KEY].replace(key[ALT_KEY], "_"*len(key[ALT_KEY])))
    print ()
    wrapPrint (str(key[DEF_KEY]))
    print ()
    return input()

def clearScreen():
    system("clear")

def playGame():
    global wordDefSentDict
    global wordList
    global gameWordSentenceDefList
    remainingWords = list(gameWordSentenceDefList)
    random.shuffle(remainingWords)
    clearScreen()
    totalCount = 0
    while remainingWords:
        key = remainingWords.pop()
        answer = key[ALT_KEY]
        response = ""
        totalCount += 1
        answerCount = 0
        while response != answer:
            print(totalCount)
            print()
            print(answer if answerCount else "__answer__")
            print()
            response = displayResponse(key)
            clearScreen()
            if response.lower() == "exit":
                exit()
            answerCount += 1

def main():
    createDictFromVocabFile()
    setupGame()
    playGame()

if __name__ == '__main__':
    main()


